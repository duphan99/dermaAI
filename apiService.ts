import type { PatientRecord, InClinicProcedure, ScarPatientRecord, AcnePatientRecord, CosmeticInfo, RejuvenationPatientRecord } from './types';
import { addPatientRecord, getPatientHistory, addScarRecord, addAcneRecord, addRejuvenationRecord } from './dbService';

export const fetchPatientHistory = async (): Promise<PatientRecord[]> => {
  await new Promise(resolve => setTimeout(resolve, 500));
  try {
    const records = await getPatientHistory();
    return records;
  } catch (error) {
    console.error("Failed to fetch patient history:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ b·ªánh nh√¢n t·ª´ c∆° s·ªü d·ªØ li·ªáu c·ª•c b·ªô.");
  }
};

export const saveRecordToDatabase = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  try {
    await addPatientRecord(record);
    return { success: true, message: "H·ªì s∆° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o database." };
  } catch(e) {
    console.error("Error saving to database:", e);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu v√†o database c·ª•c b·ªô.");
  }
};

export const savePatientRecord = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  await saveRecordToDatabase(record);
  await new Promise(resolve => setTimeout(resolve, 1000));
  return { success: true, message: "H·ªì s∆° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng." };
};

export const sendEmailToPatient = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log(`SIMULATING SENDING EMAIL TO ${record.patientInfo.email}:`, record);
  await new Promise(resolve => setTimeout(resolve, 1500));
  return { success: true, message: `Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${record.patientInfo.email}.` };
};

export const sendZaloMessage = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  const { patientInfo, diagnosis, treatmentPlan } = record;
  const formatList = (items: string[]) => items.map(item => `- ${item}`).join('\n');
  const message = `
Ch√†o ${patientInfo.fullName},
Ph√≤ng kh√°m g·ª≠i b·∫°n k·∫øt qu·∫£ ch·∫©n ƒëo√°n v√† ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã da c·ªßa m√¨nh:
üî¨ *CH·∫®N ƒêO√ÅN*
- T√¨nh tr·∫°ng: ${diagnosis.condition}
- M·ª©c ƒë·ªô: ${diagnosis.severity}
- Ph√¢n t√≠ch chi ti·∫øt: ${diagnosis.analysis}
üìã *PH√ÅC ƒê·ªí ƒêI·ªÄU TR·ªä*
**Bu·ªïi s√°ng:**
${formatList(treatmentPlan.morningRoutine)}
**Bu·ªïi t·ªëi:**
${formatList(treatmentPlan.eveningRoutine)}
**Li·ªáu tr√¨nh t·∫°i ph√≤ng kh√°m:**
${formatList(treatmentPlan.inClinicProcedures.map(p => `${p.name} (${p.frequency}): ${p.description}`))}
---
L∆∞u √Ω: ƒê√¢y l√† ph√°c ƒë·ªì do AI ƒë·ªÅ xu·∫•t v√† ƒë√£ ƒë∆∞·ª£c b√°c sƒ© xem x√©t. Vui l√≤ng tu√¢n th·ªß h∆∞·ªõng d·∫´n.`;
  console.log(`SIMULATING SENDING ZALO MESSAGE TO ${patientInfo.phoneNumber}:`, message);
  await new Promise(resolve => setTimeout(resolve, 1800));
  return { success: true, message: `Tin nh·∫Øn Zalo ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${patientInfo.phoneNumber}.` };
};

export const saveScarRecordToDatabase = async (record: Omit<ScarPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  try {
    await addScarRecord(record);
    return { success: true, message: "H·ªì s∆° tr·ªã s·∫πo ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng." };
  } catch(e) {
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu tr·ªã s·∫πo v√†o database.");
  }
};

export const saveAcneRecordToDatabase = async (record: Omit<AcnePatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  try {
    await addAcneRecord(record);
    return { success: true, message: "H·ªì s∆° tr·ªã m·ª•n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng." };
  } catch (e) {
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu tr·ªã m·ª•n v√†o database.");
  }
};

export const fetchProductsFromGoogleSheet = async (url: string): Promise<CosmeticInfo[]> => {
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Google Sheet fetch failed with status ${response.status}`);
        const csvText = await response.text();
        const rows = csvText.split(/\r?\n/).slice(1);
        const products: CosmeticInfo[] = rows
            .map(row => {
                const columns = row.split(',');
                if (columns.length < 6) return null;
                const usageValue = columns[5]?.trim().toLowerCase();
                let usage: 'morning' | 'evening' | 'both' = 'both';
                if (usageValue === 'morning' || usageValue === 'evening') {
                    usage = usageValue;
                }
                return {
                    name: columns[0]?.trim() || '',
                    brand: columns[1]?.trim() || 'N/A',
                    url: columns[2]?.trim() || '#',
                    description: columns[3]?.trim() || '',
                    keywords: columns[4]?.trim().split(';').map(k => k.trim()).filter(Boolean) || [],
                    usage: usage,
                };
            })
            .filter((p): p is CosmeticInfo => p !== null && p.name !== '');
        return products;
    } catch (error) {
        console.error("Error fetching or parsing Google Sheet CSV:", error);
        throw new Error("Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Sheet.");
    }
};